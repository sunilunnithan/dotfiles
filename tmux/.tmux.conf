# Make it use C-a similar to screen
set -g prefix C-a

# Ensure that we can send Ctrl-A to other apps
bind-key C-a send-prefix

set -g base-index 1          # start indexing windows at 1 instead of 0
set -g detach-on-destroy off # don't exit from tmux when closing a session
set -g escape-time 0         # zero-out escape time delay
set -g history-limit 1000000 # significantly increase history size
set -g mouse on              # enable mouse support
set -g renumber-windows on   # renumber all windows when any window is closed
set -g set-clipboard on      # use system clipboard
setw -g mode-keys vi
setw -g monitor-activity on
set -g visual-activity on
setw -g automatic-rename off # turn off automatic-rename
set-option -g focus-events on
set-option -g repeat-time 0
set -g visual-bell on # Don't beep at me, but print a message on the status line
set -g mouse on       # support for mouse

# set the terminal type to be something useful and 256color
set-option -g default-terminal 'screen-256color'
# tell Tmux that outside terminal supports true color
set -ga terminal-overrides ",screen-256color:Tc"

# window management
bind c new-window -c "#{pane_current_path}"
bind - split-window -v -c '#{pane_current_path}'
bind _ split-window -v -c '#{pane_current_path}'
bind | split-window -h -c '#{pane_current_path}'
bind \\ split-window -h -c '#{pane_current_path}'
bind g new-window -n 'git' lazygit
bind H new-window -n 'htop' htop
bind-key -r f run-shell "tmux neww ~/.local/bin/tmux-sessionizer"
bind-key -r i run-shell "tmux neww ~/.local/bin/tmux-cht.sh"
bind-key -r N run-shell "tmux neww ~/.local/bin/dailynotes.sh"
bind-key -r t run-shell "tmux neww nvim ~/notes/work/todo.md"
bind-key -r B run-shell "tmux neww nvim ~/notes/work/bookmarks.md"
bind-key -r C run-shell "tmux neww nvim ~/notes/work/shortcuts.md"
bind-key e send-keys "tmux capture-pane -p -S - | nvim -c 'set buftype=nofile' +" Enter

# pane management
bind y setw synchronize-panes
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 2
bind-key b break-pane -d # break pane

# log output to a text file on demand
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

#Reload Key
bind r source-file ~/.tmux.conf \; display "Reloaded"

set -g mode-style "fg=#eee8d5,bg=#073642"
set -g message-style "fg=#eee8d5,bg=#073642"
set -g message-command-style "fg=#eee8d5,bg=#073642"

# Status Bar
set -g status-position top # macOS / darwin style
set -g status "on"
set -g status-interval 2

# clock
set-window-option -g clock-mode-colour colour64 #green

# Window title
set -g automatic-rename on
set -g set-titles on
set -g set-titles-string "#S #I:#P #W:#T"

# Enable aggressive resize
set-window-option -g aggressive-resize on

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?nvim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
	"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
	"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Default to incremental search in copy-mode
bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental "%%%""
bind-key / copy-mode\; command-prompt -i -p "search up" "send -X search-backward-incremental "%%%""

# Move between windows with Shift + Arrow keys
bind -n S-Left previous-window
bind -n S-Right next-window

bind-key "K" run-shell "sesh connect \"$(
	sesh list -tz | fzf-tmux -p 55%,60% \
		--no-sort --border-label ' sesh ' --prompt '‚ö°  ' \
		--header '  ^a all ^t tmux ^x zoxide ^f find' \
		--header '  ^a all ^t tmux ^x zoxide ^d tmux kill ^f find' \
		--bind 'tab:down,btab:up' \
		--bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list)' \
		--bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t)' \
		--bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z)' \
		--bind 'ctrl-f:change-prompt(üîé  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
		--bind 'ctrl-d:execute(tmux kill-session -t {})+change-prompt(‚ö°  )+reload(sesh list)'
)\""

# fzf-url plugin - default bind key 'u'
set -g @fzf-url-fzf-options '-p 60%,30% --prompt="ÔÇé   " --border-label=" Open URL "'
set -g @fzf-url-history-limit '2000'

# tmux-last plugin
set -g @tmux-last-color on
set -g @tmux-last-pager 'less -r'
set -g @tmux-last-prompt-pattern 'ÔÅî '
set -g @tmux-last-key z

# extrakto options
set -g set-clipboard on
set -g @extrakto_clip_tool_run "tmux_osc52"
set -g @extrakto_copy_key "tab"     # use tab to copy to clipboard
set -g @extrakto_insert_key "enter" # use enter to insert selection

# Plugins
set -g @plugin 'joshmedeski/t-smart-tmux-session-manager' # default bind T
set -g @plugin 'joshmedeski/tmux-fzf-url'                 # defualt find u
set -g @plugin 'jaclu/tmux-menus'                         # default bind \\
set -g @plugin 'laktak/extrakto'                          # default bind is 'tab'
set -g @plugin 'fcsonline/tmux-thumbs'                    #defualt bind is space and then use leader ] to paste
set -g @plugin '2kabhishek/tmux2k'
set -g @plugin 'mskelton/tmux-last' # default bind z

set -g @plugin 'tmux-plugins/tpm'
run '~/.tmux/plugins/tpm/tpm' # always at end of file
